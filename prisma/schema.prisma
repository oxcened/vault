// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["typedSql"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model NetWorth {
    id          String   @id @default(cuid())
    totalAssets Decimal  @db.Decimal(38, 18)
    totalDebts  Decimal  @db.Decimal(38, 18)
    netValue    Decimal  @db.Decimal(38, 18) // computed as totalAssets - totalDebts
    timestamp   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([timestamp])
    @@index([timestamp])
}

model NetWorthAsset {
    id         String                  @id @default(cuid())
    name       String
    category   String
    tickerId   String?
    currency   String
    createdAt  DateTime                @default(now())
    updatedAt  DateTime                @updatedAt
    ticker     StockTicker?            @relation(fields: [tickerId], references: [id])
    quantities NetWorthAssetQuantity[]
}

model NetWorthAssetQuantity {
    id              String        @id @default(cuid())
    quantity        Decimal       @db.Decimal(38, 18) // e.g., 10.5 BTC, 1200 USD balance
    quantityFormula String?
    timestamp       DateTime
    netWorthAssetId String
    netWorthAsset   NetWorthAsset @relation(fields: [netWorthAssetId], references: [id], onDelete: Cascade)

    @@unique([netWorthAssetId, timestamp])
    @@index([netWorthAssetId, timestamp])
}

model NetWorthDebt {
    id         String                 @id @default(cuid())
    name       String
    category   String
    currency   String
    createdAt  DateTime               @default(now())
    updatedAt  DateTime               @updatedAt
    quantities NetWorthDebtQuantity[]
}

model NetWorthDebtQuantity {
    id              String       @id @default(cuid())
    quantity        Decimal      @db.Decimal(38, 18) // e.g., 10.5 BTC, 1200 USD balance
    quantityFormula String?
    timestamp       DateTime
    netWorthDebtId  String
    netWorthDebt    NetWorthDebt @relation(fields: [netWorthDebtId], references: [id], onDelete: Cascade)

    @@unique([netWorthDebtId, timestamp])
    @@index([netWorthDebtId, timestamp])
}

model StockTicker {
    id             String              @id @default(cuid())
    ticker         String // e.g., 'AAPL', 'BTC'
    exchange       String // e.g., 'NASDAQ', 'NYSE', 'BINANCE'
    name           String // 'Apple Inc.'
    netWorthAssets NetWorthAsset[]
    prices         StockPriceHistory[]

    @@unique([ticker, exchange], name: "ticker_exchange") // Prevents duplicate tickers across different exchanges
}

model StockPriceHistory {
    id        String      @id @default(cuid())
    tickerId  String
    price     Decimal     @db.Decimal(38, 18)
    timestamp DateTime
    ticker    StockTicker @relation(fields: [tickerId], references: [id])

    @@unique([tickerId, timestamp], name: "ticker_timestamp") // Ensures one price per ticker per timestamp
    @@index([tickerId, timestamp])
}

model ExchangeRate {
    id            String   @id @default(cuid())
    baseCurrency  String   @db.VarChar(3)
    quoteCurrency String   @db.VarChar(3)
    rate          Decimal  @db.Decimal(38, 18)
    timestamp     DateTime

    @@unique([baseCurrency, quoteCurrency, timestamp], name: "base_quote_timestamp")
    @@index([baseCurrency, quoteCurrency, timestamp])
}

model Transaction {
    id          String          @id @default(cuid())
    description String
    amount      Decimal         @db.Decimal(38, 18)
    currency    String
    type        TransactionType
    categoryId  String
    timestamp   DateTime
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    category TransactionCategory @relation(fields: [categoryId], references: [id])
}

model TransactionCategory {
    id           String        @id @default(cuid())
    name         String
    transactions Transaction[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

enum TransactionType {
    INCOME
    EXPENSE
    TRANSFER
}
